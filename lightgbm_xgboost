{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3d102e09",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-24T18:16:47.564590Z",
     "iopub.status.busy": "2025-07-24T18:16:47.564150Z",
     "iopub.status.idle": "2025-07-24T18:16:59.126656Z",
     "shell.execute_reply": "2025-07-24T18:16:59.125719Z"
    },
    "papermill": {
     "duration": 11.569835,
     "end_time": "2025-07-24T18:16:59.128500",
     "exception": false,
     "start_time": "2025-07-24T18:16:47.558665",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>Street</th>\n",
       "      <th>Alley</th>\n",
       "      <th>LotShape</th>\n",
       "      <th>LandContour</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>...</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>PoolQC</th>\n",
       "      <th>Fence</th>\n",
       "      <th>MiscFeature</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SaleType</th>\n",
       "      <th>SaleCondition</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>65.0</td>\n",
       "      <td>8450</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>208500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>80.0</td>\n",
       "      <td>9600</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>2007</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>181500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>68.0</td>\n",
       "      <td>11250</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>223500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>70</td>\n",
       "      <td>RL</td>\n",
       "      <td>60.0</td>\n",
       "      <td>9550</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2006</td>\n",
       "      <td>WD</td>\n",
       "      <td>Abnorml</td>\n",
       "      <td>140000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>84.0</td>\n",
       "      <td>14260</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>250000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 81 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Id  MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n",
       "0   1          60       RL         65.0     8450   Pave   NaN      Reg   \n",
       "1   2          20       RL         80.0     9600   Pave   NaN      Reg   \n",
       "2   3          60       RL         68.0    11250   Pave   NaN      IR1   \n",
       "3   4          70       RL         60.0     9550   Pave   NaN      IR1   \n",
       "4   5          60       RL         84.0    14260   Pave   NaN      IR1   \n",
       "\n",
       "  LandContour Utilities  ... PoolArea PoolQC Fence MiscFeature MiscVal MoSold  \\\n",
       "0         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      2   \n",
       "1         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      5   \n",
       "2         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      9   \n",
       "3         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      2   \n",
       "4         Lvl    AllPub  ...        0    NaN   NaN         NaN       0     12   \n",
       "\n",
       "  YrSold  SaleType  SaleCondition  SalePrice  \n",
       "0   2008        WD         Normal     208500  \n",
       "1   2007        WD         Normal     181500  \n",
       "2   2008        WD         Normal     223500  \n",
       "3   2006        WD        Abnorml     140000  \n",
       "4   2008        WD         Normal     250000  \n",
       "\n",
       "[5 rows x 81 columns]"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# General\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "# Plotting\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "# Preprocessing\n",
    "from sklearn.model_selection import train_test_split, KFold, RandomizedSearchCV\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.compose import ColumnTransformer\n",
    "# Models and training\n",
    "from lightgbm import LGBMRegressor\n",
    "from xgboost import XGBRegressor\n",
    "from scipy.stats import randint, uniform\n",
    "# Tracking performance\n",
    "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
    "\n",
    "\n",
    "df = pd.read_csv('/kaggle/input/home-data-for-ml-course/train.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1257537",
   "metadata": {
    "papermill": {
     "duration": 0.003344,
     "end_time": "2025-07-24T18:16:59.136137",
     "exception": false,
     "start_time": "2025-07-24T18:16:59.132793",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Target skewedness"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b708a31e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T18:16:59.144611Z",
     "iopub.status.busy": "2025-07-24T18:16:59.144300Z",
     "iopub.status.idle": "2025-07-24T18:16:59.858295Z",
     "shell.execute_reply": "2025-07-24T18:16:59.857415Z"
    },
    "papermill": {
     "duration": 0.720007,
     "end_time": "2025-07-24T18:16:59.859820",
     "exception": false,
     "start_time": "2025-07-24T18:16:59.139813",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.histplot(df['SalePrice'], kde=True)\n",
    "plt.title(\"Original SalePrice distribution\")\n",
    "plt.show()\n",
    "\n",
    "sns.histplot(np.log1p(df['SalePrice']), kde=True)\n",
    "plt.title(\"Log-transformed SalePrice distribution\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be02d69f",
   "metadata": {
    "papermill": {
     "duration": 0.004544,
     "end_time": "2025-07-24T18:16:59.869545",
     "exception": false,
     "start_time": "2025-07-24T18:16:59.865001",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Feature engineering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5a0c6c14",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T18:16:59.880787Z",
     "iopub.status.busy": "2025-07-24T18:16:59.880443Z",
     "iopub.status.idle": "2025-07-24T18:16:59.887886Z",
     "shell.execute_reply": "2025-07-24T18:16:59.886976Z"
    },
    "papermill": {
     "duration": 0.014979,
     "end_time": "2025-07-24T18:16:59.889468",
     "exception": false,
     "start_time": "2025-07-24T18:16:59.874489",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "features = df.columns.drop(['SalePrice', 'Id'])\n",
    "target = 'SalePrice'\n",
    "\n",
    "X = df[features]\n",
    "y = np.log1p(df[target])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b697b93",
   "metadata": {
    "papermill": {
     "duration": 0.004771,
     "end_time": "2025-07-24T18:16:59.899171",
     "exception": false,
     "start_time": "2025-07-24T18:16:59.894400",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "42d25f4c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T18:16:59.910784Z",
     "iopub.status.busy": "2025-07-24T18:16:59.910445Z",
     "iopub.status.idle": "2025-07-24T18:16:59.922056Z",
     "shell.execute_reply": "2025-07-24T18:16:59.921194Z"
    },
    "papermill": {
     "duration": 0.019665,
     "end_time": "2025-07-24T18:16:59.923801",
     "exception": false,
     "start_time": "2025-07-24T18:16:59.904136",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "numerical_features = X.select_dtypes(include=['int64','float64']).columns.tolist()\n",
    "categorical_features = X.select_dtypes(include=['object']).columns.tolist()\n",
    "\n",
    "num_transformer = SimpleImputer(strategy='constant', fill_value=-1)\n",
    "cat_transformer = Pipeline(steps=[\n",
    "    ('imputer', SimpleImputer(strategy='constant', fill_value='None')),\n",
    "    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n",
    "])\n",
    "\n",
    "preprocessor = ColumnTransformer(\n",
    "    transformers=[\n",
    "        ('num', num_transformer, numerical_features),\n",
    "        ('cat', cat_transformer, categorical_features)\n",
    "    ])\n",
    "\n",
    "cv = KFold(n_splits=5, shuffle=True, random_state=42)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d5b4dc07",
   "metadata": {
    "papermill": {
     "duration": 0.004499,
     "end_time": "2025-07-24T18:16:59.933229",
     "exception": false,
     "start_time": "2025-07-24T18:16:59.928730",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Evaluation functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f2eb7d90",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T18:16:59.944034Z",
     "iopub.status.busy": "2025-07-24T18:16:59.943704Z",
     "iopub.status.idle": "2025-07-24T18:16:59.949634Z",
     "shell.execute_reply": "2025-07-24T18:16:59.948639Z"
    },
    "papermill": {
     "duration": 0.01308,
     "end_time": "2025-07-24T18:16:59.951097",
     "exception": false,
     "start_time": "2025-07-24T18:16:59.938017",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def simple_eval(predictions):\n",
    "    predictions = np.expm1(predictions)\n",
    "    true_vals = np.expm1(y_test)\n",
    "\n",
    "    mae = mean_absolute_error(true_vals, predictions)\n",
    "    mse = mean_squared_error(true_vals, predictions)\n",
    "    rmse = np.sqrt(mse)\n",
    "    r2 = r2_score(true_vals, predictions)\n",
    "    \n",
    "    print(f\"MAE: {mae:.2f}\")\n",
    "    print(f\"RMSE: {rmse:.2f}\")\n",
    "    print(f\"RÂ²: {r2:.3f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c2c9713",
   "metadata": {
    "papermill": {
     "duration": 0.004727,
     "end_time": "2025-07-24T18:16:59.960700",
     "exception": false,
     "start_time": "2025-07-24T18:16:59.955973",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# LightGBM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "fd540201",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T18:16:59.973084Z",
     "iopub.status.busy": "2025-07-24T18:16:59.972760Z",
     "iopub.status.idle": "2025-07-24T18:18:16.008815Z",
     "shell.execute_reply": "2025-07-24T18:18:16.007588Z"
    },
    "papermill": {
     "duration": 76.048345,
     "end_time": "2025-07-24T18:18:16.014926",
     "exception": false,
     "start_time": "2025-07-24T18:16:59.966581",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE: 16786.07\n",
      "RMSE: 28585.07\n",
      "RÂ²: 0.893\n"
     ]
    }
   ],
   "source": [
    "pipeline_lgbm = Pipeline(steps=[\n",
    "    ('preprocessor', preprocessor),\n",
    "    ('regressor', LGBMRegressor(random_state=42, verbose=-1))\n",
    "])\n",
    "\n",
    "param_grid_lgbm = {\n",
    "    'regressor__num_leaves': randint(20, 100),          # 20 to 100 leaves\n",
    "    'regressor__max_depth': randint(5, 40),             # 5 to 40 max depth\n",
    "    'regressor__learning_rate': uniform(0.01, 0.19),    # 0.01 to 0.20 learning rate\n",
    "    'regressor__n_estimators': randint(50, 300),      # 100 to 1000 trees\n",
    "    'regressor__min_child_samples': randint(10, 100),   # 10 to 100 min samples per leaf\n",
    "    'regressor__subsample': uniform(0.5, 0.5),          # 0.5 to 1.0 subsample (row sampling)\n",
    "    'regressor__colsample_bytree': uniform(0.5, 0.5),   # 0.5 to 1.0 colsample (feature sampling)\n",
    "    'regressor__reg_alpha': uniform(0, 1),              # 0 to 1 L1 reg\n",
    "    'regressor__reg_lambda': uniform(0, 1)              # 0 to 1 L2 reg\n",
    "}\n",
    "\n",
    "model_lgbm = RandomizedSearchCV(estimator=pipeline_lgbm, param_distributions=param_grid_lgbm,\n",
    "                                   n_iter=30, cv=cv, scoring='neg_mean_squared_error', verbose=0, n_jobs=-1, random_state=42)\n",
    "\n",
    "model_lgbm.fit(X_train, y_train)\n",
    "y_pred_lgbm = model_lgbm.predict(X_test)\n",
    "\n",
    "# Evaluation (16786.07, 28585.07, 0.893)\n",
    "simple_eval(y_pred_lgbm)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e7042cf7",
   "metadata": {
    "papermill": {
     "duration": 0.004614,
     "end_time": "2025-07-24T18:18:16.024421",
     "exception": false,
     "start_time": "2025-07-24T18:18:16.019807",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# XGBoost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a765d4d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T18:18:16.035388Z",
     "iopub.status.busy": "2025-07-24T18:18:16.035025Z",
     "iopub.status.idle": "2025-07-24T18:18:40.846655Z",
     "shell.execute_reply": "2025-07-24T18:18:40.845533Z"
    },
    "papermill": {
     "duration": 24.819546,
     "end_time": "2025-07-24T18:18:40.848739",
     "exception": false,
     "start_time": "2025-07-24T18:18:16.029193",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE: 16401.18\n",
      "RMSE: 28214.28\n",
      "RÂ²: 0.896\n"
     ]
    }
   ],
   "source": [
    "pipeline_xgb = Pipeline(steps=[\n",
    "    ('preprocessor', preprocessor),\n",
    "    ('regressor', XGBRegressor(random_state=42, verbosity=0))\n",
    "])\n",
    "\n",
    "param_grid_xgb = {\n",
    "    'regressor__n_estimators': randint(100, 300),             # Reduced from 50â€“1000\n",
    "    'regressor__max_depth': randint(3, 7),                    # Shallower trees: 3 to 6\n",
    "    'regressor__learning_rate': uniform(0.03, 0.07),          # 0.03 to 0.1\n",
    "    'regressor__subsample': uniform(0.8, 0.2),                # 0.8 to 1.0\n",
    "    'regressor__colsample_bytree': uniform(0.8, 0.2),         # 0.8 to 1.0\n",
    "    'regressor__min_child_weight': randint(1, 5),             # Smaller range for faster runs\n",
    "    'regressor__gamma': uniform(0, 0.2),                      # Low regularization\n",
    "    'regressor__reg_alpha': uniform(0, 0.3),                  # Smaller L1 penalty\n",
    "    'regressor__reg_lambda': uniform(0.5, 0.5)                # 0.5 to 1.0 L2 penalty\n",
    "}\n",
    "\n",
    "model_xgb = RandomizedSearchCV(estimator=pipeline_xgb, param_distributions=param_grid_xgb,\n",
    "                                   n_iter=30, cv=cv, scoring='neg_mean_squared_error', verbose=0, n_jobs=-1, random_state=42)\n",
    "\n",
    "model_xgb.fit(X_train, y_train)\n",
    "y_pred_xgb = model_xgb.predict(X_test)\n",
    "\n",
    "# Evaluation (16401.18, 28214.28, 0.896)\n",
    "simple_eval(y_pred_xgb)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7bd59e80",
   "metadata": {
    "papermill": {
     "duration": 0.004746,
     "end_time": "2025-07-24T18:18:40.858721",
     "exception": false,
     "start_time": "2025-07-24T18:18:40.853975",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Ensemble"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7c0c7916",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T18:18:40.870295Z",
     "iopub.status.busy": "2025-07-24T18:18:40.869903Z",
     "iopub.status.idle": "2025-07-24T18:18:40.877687Z",
     "shell.execute_reply": "2025-07-24T18:18:40.876579Z"
    },
    "papermill": {
     "duration": 0.015474,
     "end_time": "2025-07-24T18:18:40.879119",
     "exception": false,
     "start_time": "2025-07-24T18:18:40.863645",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE: 16091.45\n",
      "RMSE: 27991.28\n",
      "RÂ²: 0.898\n"
     ]
    }
   ],
   "source": [
    "average_pred = (y_pred_lgbm * 0.4 + y_pred_xgb * 0.6)\n",
    "\n",
    "# Evaluation (16091.45, 27991.28, 0.898)\n",
    "simple_eval(average_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "491c1e62",
   "metadata": {
    "papermill": {
     "duration": 0.004835,
     "end_time": "2025-07-24T18:18:40.890900",
     "exception": false,
     "start_time": "2025-07-24T18:18:40.886065",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Making a submission"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3385a132",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T18:18:40.902323Z",
     "iopub.status.busy": "2025-07-24T18:18:40.901883Z",
     "iopub.status.idle": "2025-07-24T18:18:41.611321Z",
     "shell.execute_reply": "2025-07-24T18:18:41.610125Z"
    },
    "papermill": {
     "duration": 0.716891,
     "end_time": "2025-07-24T18:18:41.612904",
     "exception": false,
     "start_time": "2025-07-24T18:18:40.896013",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     Id      SalePrice\n",
      "0  1461  121432.659430\n",
      "1  1462  159976.054883\n",
      "2  1463  183200.949977\n",
      "3  1464  190618.717519\n",
      "4  1465  185978.706148\n"
     ]
    }
   ],
   "source": [
    "test_df  = pd.read_csv('/kaggle/input/home-data-for-ml-course/test.csv')\n",
    "test_X = test_df[features]\n",
    "\n",
    "\n",
    "pipeline_1 = model_lgbm.best_estimator_\n",
    "pipeline_1.fit(X, y)\n",
    "predictions_1 = np.expm1(pipeline_1.predict(test_X))\n",
    "\n",
    "pipeline_2 = model_xgb.best_estimator_\n",
    "pipeline_2.fit(X, y)\n",
    "predictions_2 = np.expm1(pipeline_2.predict(test_X))\n",
    "\n",
    "predictions = predictions_1 * 0.4 + predictions_2 * 0.6\n",
    "\n",
    "submission = pd.DataFrame({\n",
    "    'Id': test_df['Id'],\n",
    "    'SalePrice': predictions\n",
    "})\n",
    "\n",
    "print(submission.head(5))\n",
    "\n",
    "submission.to_csv('submission.csv', index=False)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 111096,
     "sourceId": 10211,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 123.078265,
   "end_time": "2025-07-24T18:18:44.238875",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-24T18:16:41.160610",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
